/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JFProcessDirectory.java
 *
 * Created on Mar 19, 2011, 2:37:16 PM
 */

package elicit.exportdata;

import elicit.exportdata.ExportLogFilesToCSV;
import elicit.message.OrganizationMessage;
import elicit.message.TrialData;
import java.io.*;
import java.util.*;

/**
 *
 * @author marcomanso
 */
public class JFProcessDirectory extends javax.swing.JFrame {

    /*
    class TimerProcessJob extends TimerTask {

        Vector<java.io.File> m_timerLogFiles = null;
        Thread m_runningThread = null;

        public TimerProcessJob(Vector<java.io.File> logFiles) {
            m_timerLogFiles = (Vector)logFiles.clone();
        }

        @Override
        public void run() {
            if (m_runningThread == null || !m_runningThread.isAlive() ) 
            {
                File file = m_timerLogFiles.remove(0);
                System.out.println("processing log file: "+file.getAbsolutePath());
                m_runningThread = new Thread(new ExportLogFilesToCSV(file, null));
                m_runningThread.start();
            }
            //else {
            //    System.out.println("wait.");
            //}
            //
            if ( m_timerLogFiles.isEmpty() ) {
                m_timer.cancel();
                System.out.println("Finished.");
            }

        }

    }

    TimerProcessJob m_timerProcessJob = null;
    Timer m_timer = new Timer();
    //Thread m_runningThread = null;
     *
     *
     */
    java.util.Vector<java.io.File> m_logFiles = new java.util.Vector<java.io.File>();

    //
    /** Creates new form JFProcessDirectory */
    public JFProcessDirectory() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jfcDirChooser = new javax.swing.JFileChooser();
        jcpLogFiles = new javax.swing.JScrollPane();
        jlLogFilesList = new javax.swing.JList();
        jbGO = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jlSelectedDirectory = new javax.swing.JLabel();

        jfcDirChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        setTitle("Process Directory");
        setModalExclusionType(null);
        setSize(new java.awt.Dimension(500, 500));
        getContentPane().setLayout(new java.awt.BorderLayout(20, 0));

        jcpLogFiles.setBorder(null);
        jcpLogFiles.setViewportBorder(javax.swing.BorderFactory.createTitledBorder("Log Files"));
        jcpLogFiles.setOpaque(false);
        jcpLogFiles.setPreferredSize(new java.awt.Dimension(400, 300));

        jlLogFilesList.setFont(new java.awt.Font("Courier", 0, 10));
        jlLogFilesList.setEnabled(false);
        jlLogFilesList.setPreferredSize(null);
        jcpLogFiles.setViewportView(jlLogFilesList);

        getContentPane().add(jcpLogFiles, java.awt.BorderLayout.CENTER);

        jbGO.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/accepted_48.png"))); // NOI18N
        jbGO.setText("GO !");
        jbGO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGOActionPerformed(evt);
            }
        });
        getContentPane().add(jbGO, java.awt.BorderLayout.PAGE_END);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Select Directory:");
        jLabel1.setPreferredSize(new java.awt.Dimension(130, 16));
        jPanel1.add(jLabel1);

        jlSelectedDirectory.setBackground(new java.awt.Color(204, 204, 204));
        jlSelectedDirectory.setText("  < click to open >");
        jlSelectedDirectory.setOpaque(true);
        jlSelectedDirectory.setPreferredSize(new java.awt.Dimension(400, 25));
        jlSelectedDirectory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlSelectedDirectoryMouseClicked(evt);
            }
        });
        jPanel1.add(jlSelectedDirectory);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jlSelectedDirectoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlSelectedDirectoryMouseClicked
        // TODO add your handling code here:
        int returnVal = jfcDirChooser.showOpenDialog(this);
        if ( returnVal == javax.swing.JFileChooser.APPROVE_OPTION )
        {
            File selectedDir = jfcDirChooser.getSelectedFile();
            jlSelectedDirectory.setText(selectedDir.getPath());
            //load all log files
            FilenameFilter onlyLog = new FilenameFilter() {
                @Override
                public boolean accept(File file, String name) {
                    return name.endsWith(".log");
                }
            };
            m_logFiles.clear();
            m_logFiles.addAll(Arrays.asList(selectedDir.listFiles(onlyLog)));
            jlLogFilesList.setListData(m_logFiles);
        }
    }//GEN-LAST:event_jlSelectedDirectoryMouseClicked

    private void jbGOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGOActionPerformed
        //output - console
        jbGO.setEnabled(false);
        if (m_logFiles.isEmpty()) {
            jbGO.setEnabled(true);
            return; //do nothing
        }

        try {
            for (File file : m_logFiles) {
                ExportLogFilesToCSV process = new ExportLogFilesToCSV(file, null);
                process.ProcessLog();
                //
                Thread.sleep(500);
                System.gc();
            }

            /*
            m_timerProcessJob = new TimerProcessJob(m_logFiles);
            m_timer.schedule(m_timerProcessJob, 0, 1000);

            LinkedList<Thread> jobList = new LinkedList<Thread>();
            for ( File file : m_logFiles ) {

                //ExportLogFilesToCSV job = new ExportLogFilesToCSV(file);
                Thread job = null;
                if ( jobList.size()==0 ) {
                    job = new Thread(new ExportLogFilesToCSV(file, null));
                }
                else {
                    job = new Thread(new ExportLogFilesToCSV(file, jobList.getLast()));
                }
                jobList.addLast(job);
                job.start();
                //
                Thread.sleep(100);
            }
            */
            Runtime.getRuntime().freeMemory();
            System.gc();
            System.out.println("Total memory="+Runtime.getRuntime().totalMemory()+" Free memory="+Runtime.getRuntime().freeMemory());
        }
        catch (Exception ex) {
            System.err.println("An exception was raised: "+ex.getMessage());
            ex.printStackTrace();
        }
        System.out.println("Finished... and exiting");
        jbGO.setEnabled(true);
        
        System.exit(0);
        
    }//GEN-LAST:event_jbGOActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFProcessDirectory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbGO;
    private javax.swing.JScrollPane jcpLogFiles;
    private javax.swing.JFileChooser jfcDirChooser;
    private javax.swing.JList jlLogFilesList;
    private javax.swing.JLabel jlSelectedDirectory;
    // End of variables declaration//GEN-END:variables

}
