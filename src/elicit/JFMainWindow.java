/*
 * JFMainWindow.java
 *
 * Created on 07 March 2007, 23:22
 */

package elicit;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
import elicit.exportdata.CreateBatchFiles;
import elicit.tools.JFELICITMetricsVisualizer;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author  mmanso
 */
public class JFMainWindow extends javax.swing.JFrame {
    
    Properties m_properties;
    static String m_propertiesFileName = "main.properties";
    static String m_propertiesStoreComment = "ELICIT properties file";

    //last input files
    static String m_inputFilesKey = "inputFilesKey";
    Vector<String> m_inputFilesValues;
    //
    elicit.exportdata.JFProcessDirectory m_jfProcessDirectory;
    //
    // tools
    elicit.utils.dialogs.JFFactoidsReclassification jfReclass = new elicit.utils.dialogs.JFFactoidsReclassification();
    //
    agility.JFAgility jfAgility = null;

    /** Creates new form JFMainWindow */
    public JFMainWindow() {
        //
        tools.UItools.UITools.setNativeLookAndFeel();
        initComponents();
        //
        try {
            readProperties();
        } catch (IOException ex) {
            Logger.getLogger(JFMainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        //
        FileNameExtensionFilter filter = new FileNameExtensionFilter("ELICIT LOG files", "txt", "log");
        jfcOpenFile.setFileFilter(filter);
        if (m_inputFilesValues.size()!=0) {
            jfcOpenFile.setSelectedFile( new File(m_inputFilesValues.elementAt(0)) );
        }
        updateFileList();
        //
        m_jfProcessDirectory = new elicit.exportdata.JFProcessDirectory();
    }
    
    private void readProperties() throws IOException {
        m_properties = new Properties();
        try {
            //read properties file (any data?)
            m_properties.loadFromXML(new FileInputStream(m_propertiesFileName));
            XStream xstream = new XStream(new DomDriver());
            String xml;
            //input files list
            xml = m_properties.getProperty(m_inputFilesKey);
            if (xml!=null) {
                m_inputFilesValues = (Vector<String>) xstream.fromXML(xml);
            }
        } catch (IOException ex) {
            //no properties? create
            m_properties.storeToXML(new FileOutputStream(m_propertiesFileName), m_propertiesStoreComment);
        }
        //initialize lists
        if (m_inputFilesValues == null) {
            m_inputFilesValues = new Vector<String>();
        }
    }

    private void writeProperties() throws IOException {
        XStream xstream = new XStream(new DomDriver());
        String xml;
        //write properties
        //files
        xml = xstream.toXML(m_inputFilesValues);
        m_properties.setProperty(m_inputFilesKey, xml);

        //write file
        m_properties.storeToXML(new FileOutputStream(m_propertiesFileName), m_propertiesStoreComment);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jfcOpenFile = new javax.swing.JFileChooser();
        jdWarnings = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlLogList = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jbAddFIle = new javax.swing.JButton();
        jbRemoveFile = new javax.swing.JButton();
        jbGO = new javax.swing.JButton();
        jbAddDir = new javax.swing.JButton();
        jbRemoveAll = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmELICIT = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JSeparator();
        jmiExit = new javax.swing.JMenuItem();
        jmTools = new javax.swing.JMenu();
        jmiProcessDirectory = new javax.swing.JMenuItem();
        jmiAgilityMaps = new javax.swing.JMenuItem();
        jmMiscTools = new javax.swing.JMenu();
        jmiConversion = new javax.swing.JMenuItem();
        jmiOutputIdentifies = new javax.swing.JMenuItem();
        jmiReclassify = new javax.swing.JMenuItem();
        jmiCreateAgentsBatch = new javax.swing.JMenuItem();
        jmiCreateAgilityBatch = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jdWarningsLayout = new javax.swing.GroupLayout(jdWarnings.getContentPane());
        jdWarnings.getContentPane().setLayout(jdWarningsLayout);
        jdWarningsLayout.setHorizontalGroup(
            jdWarningsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jdWarningsLayout.setVerticalGroup(
            jdWarningsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NECLace");
        setName("jfNECLace"); // NOI18N
        setResizable(false);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/neclace-logo-small.jpg"))); // NOI18N
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        jlLogList.setFont(new java.awt.Font("Courier", 0, 10)); // NOI18N
        jlLogList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jlLogList);

        jLabel2.setBackground(new java.awt.Color(204, 204, 204));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("  ELICIT Logs");
        jLabel2.setOpaque(true);

        jbAddFIle.setFont(jbAddFIle.getFont().deriveFont(jbAddFIle.getFont().getSize()-2f));
        jbAddFIle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/database_add_48.png"))); // NOI18N
        jbAddFIle.setText("ADD");
        jbAddFIle.setContentAreaFilled(false);
        jbAddFIle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbAddFIle.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jbAddFIle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbAddFIle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddFIleActionPerformed(evt);
            }
        });

        jbRemoveFile.setFont(jbRemoveFile.getFont().deriveFont(jbRemoveFile.getFont().getSize()-2f));
        jbRemoveFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/database_remove_48.png"))); // NOI18N
        jbRemoveFile.setText("DEL");
        jbRemoveFile.setContentAreaFilled(false);
        jbRemoveFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbRemoveFile.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jbRemoveFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbRemoveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveFileActionPerformed(evt);
            }
        });

        jbGO.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/accepted_48.png"))); // NOI18N
        jbGO.setText("GO");
        jbGO.setContentAreaFilled(false);
        jbGO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGOActionPerformed(evt);
            }
        });

        jbAddDir.setFont(jbAddDir.getFont().deriveFont(jbAddDir.getFont().getSize()-2f));
        jbAddDir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/database_overwrite.png"))); // NOI18N
        jbAddDir.setText("DIR");
        jbAddDir.setContentAreaFilled(false);
        jbAddDir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbAddDir.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jbAddDir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbAddDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddDirActionPerformed(evt);
            }
        });

        jbRemoveAll.setFont(jbRemoveAll.getFont().deriveFont(jbRemoveAll.getFont().getSize()-2f));
        jbRemoveAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/database_remove_48.png"))); // NOI18N
        jbRemoveAll.setContentAreaFilled(false);
        jbRemoveAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbRemoveAll.setLabel("DEL ALL");
        jbRemoveAll.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jbRemoveAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbRemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveAllActionPerformed(evt);
            }
        });

        jmELICIT.setText("Menu");
        jmELICIT.add(jSeparator1);

        jmiExit.setText("Exit");
        jmiExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExitActionPerformed(evt);
            }
        });
        jmELICIT.add(jmiExit);

        jMenuBar1.add(jmELICIT);

        jmTools.setText("Tools");

        jmiProcessDirectory.setText("Process Directory");
        jmiProcessDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiProcessDirectoryActionPerformed(evt);
            }
        });
        jmTools.add(jmiProcessDirectory);

        jmiAgilityMaps.setText("Agility Maps");
        jmiAgilityMaps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAgilityMapsActionPerformed(evt);
            }
        });
        jmTools.add(jmiAgilityMaps);

        jMenuBar1.add(jmTools);

        jmMiscTools.setText("Misc Tools");

        jmiConversion.setText("ELICIT Conversion Tool");
        jmiConversion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiConversionActionPerformed(evt);
            }
        });
        jmMiscTools.add(jmiConversion);

        jmiOutputIdentifies.setText("Output Identify Answers");
        jmiOutputIdentifies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiOutputIdentifiesActionPerformed(evt);
            }
        });
        jmMiscTools.add(jmiOutputIdentifies);

        jmiReclassify.setText("Factoids Reclassification");
        jmiReclassify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiReclassifyActionPerformed(evt);
            }
        });
        jmMiscTools.add(jmiReclassify);

        jmiCreateAgentsBatch.setText("Create Agents Batch (N2C2M2 runs)");
        jmiCreateAgentsBatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCreateAgentsBatchActionPerformed(evt);
            }
        });
        jmMiscTools.add(jmiCreateAgentsBatch);

        jmiCreateAgilityBatch.setText("Create Agility Batch (Agility Runs)");
        jmiCreateAgilityBatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCreateAgilityBatchActionPerformed(evt);
            }
        });
        jmMiscTools.add(jmiCreateAgilityBatch);

        jMenuBar1.add(jmMiscTools);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jbGO)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(jbAddFIle, javax.swing.GroupLayout.PREFERRED_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(jbAddDir, javax.swing.GroupLayout.PREFERRED_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(jbRemoveFile, javax.swing.GroupLayout.PREFERRED_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(jbRemoveAll, javax.swing.GroupLayout.PREFERRED_SIZE, 60, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbAddFIle, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbAddDir, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbRemoveFile, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbRemoveAll, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbGO, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jmiConversionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiConversionActionPerformed
        try {
            new elicit.tools.JFConvertELICITLog().setVisible(true);
        } catch (IOException ex) {
            ex.printStackTrace();
            //pop-up error window
            JOptionPane.showMessageDialog(this,"An error occur: exception is "+ex.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jmiConversionActionPerformed
                
    private void jmiExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jmiExitActionPerformed

    private void jmiOutputIdentifiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiOutputIdentifiesActionPerformed
        try {
            new elicit.tools.JFOutputIdentifyAnswers().setVisible(true);
        } catch (IOException ex) {
            ex.printStackTrace();
            //pop-up error window
            JOptionPane.showMessageDialog(this,"An error occur: exception is "+ex.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jmiOutputIdentifiesActionPerformed

    private void updateFileList() {
        jlLogList.setListData(m_inputFilesValues);
    }

    private void jbAddFIleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddFIleActionPerformed
        int returnVal = jfcOpenFile.showOpenDialog(this);
        if ( returnVal == JFileChooser.APPROVE_OPTION 
            &&  jfcOpenFile.getSelectedFile() != null
            && !m_inputFilesValues.contains(jfcOpenFile.getSelectedFile().getAbsolutePath()) )
        {
            m_inputFilesValues.add(jfcOpenFile.getSelectedFile().getAbsolutePath());
            updateFileList();
            try {
                writeProperties();
            } catch (IOException ex) {
                Logger.getLogger(JFMainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
}//GEN-LAST:event_jbAddFIleActionPerformed

    private void jbRemoveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoveFileActionPerformed
        String selectedFile = (String)jlLogList.getSelectedValue();
        if (selectedFile!=null) {
            m_inputFilesValues.remove(selectedFile);
            updateFileList();
            try {
                writeProperties();
            } catch (IOException ex) {
                Logger.getLogger(JFMainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            updateFileList();
        }
    }//GEN-LAST:event_jbRemoveFileActionPerformed

    private void jbGOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGOActionPerformed
        if (jlLogList.getSelectedIndex()!=-1) {
            JFELICITMetricsVisualizer metricsVisualizer = new JFELICITMetricsVisualizer((String)jlLogList.getSelectedValue());
            metricsVisualizer.setVisible(true);
        }

    }//GEN-LAST:event_jbGOActionPerformed

    private void jmiReclassifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiReclassifyActionPerformed
        jfReclass.setVisible(true);
    }//GEN-LAST:event_jmiReclassifyActionPerformed

    private void jmiProcessDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiProcessDirectoryActionPerformed
        m_jfProcessDirectory.setVisible(true);
    }//GEN-LAST:event_jmiProcessDirectoryActionPerformed

    private void jmiCreateAgentsBatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCreateAgentsBatchActionPerformed
        JFileChooser jfcOpenFile = new JFileChooser();
        jfcOpenFile.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        int returnVal = jfcOpenFile.showOpenDialog(this);
        if ( returnVal == JFileChooser.APPROVE_OPTION
            && jfcOpenFile.getSelectedFile() != null
            && jfcOpenFile.getSelectedFile().isDirectory() )
        {
            CreateBatchFiles.createN2C2M2Batch(jfcOpenFile.getSelectedFile().getPath());
        }
        else {
            JOptionPane.showInternalMessageDialog(
                    this,
                    "No directory selected.",
                    "No directory selected.",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jmiCreateAgentsBatchActionPerformed

    private void jbAddDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddDirActionPerformed
        JFileChooser jfcOpenFile = new JFileChooser();
        jfcOpenFile.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        int returnVal = jfcOpenFile.showOpenDialog(this);
        if ( returnVal == JFileChooser.APPROVE_OPTION
            && jfcOpenFile.getSelectedFile() != null
            && jfcOpenFile.getSelectedFile().isDirectory() )
        {
            m_inputFilesValues.removeAllElements();
            for ( File file : jfcOpenFile.getSelectedFile().listFiles() ) {
                if (file.getAbsolutePath().endsWith(".log")) m_inputFilesValues.add(file.getAbsolutePath());
            }
            updateFileList();
            try {
                writeProperties();
            } catch (IOException ex) {
                Logger.getLogger(JFMainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else {
            JOptionPane.showInternalMessageDialog(
                    this,
                    "No directory selected.",
                    "No directory selected.",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jbAddDirActionPerformed

    private void jbRemoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoveAllActionPerformed
        //default icon, custom title
        int n = JOptionPane.showConfirmDialog(
            this,
            "This will remove all files from this list. Are you sure?",
            "WARNING",
            JOptionPane.YES_NO_OPTION);
        if (n == JOptionPane.YES_OPTION) {
            m_inputFilesValues.removeAllElements();
            updateFileList();
        }
    }//GEN-LAST:event_jbRemoveAllActionPerformed

    private void jmiAgilityMapsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAgilityMapsActionPerformed
        if (jfAgility==null)  jfAgility = new agility.JFAgility();
        if (jfAgility.isVisible()==false) jfAgility.setVisible(true);
        jfAgility.toFront();
    }//GEN-LAST:event_jmiAgilityMapsActionPerformed

    private void jmiCreateAgilityBatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCreateAgilityBatchActionPerformed
        JFileChooser jfcOpenFile = new JFileChooser();
        jfcOpenFile.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        int returnVal = jfcOpenFile.showOpenDialog(this);
        if ( returnVal == JFileChooser.APPROVE_OPTION
            && jfcOpenFile.getSelectedFile() != null
            && jfcOpenFile.getSelectedFile().isDirectory() )
        {
            //CreateBatchFiles.createAgilityBatch(jfcOpenFile.getSelectedFile().getPath());
            //CreateBatchFiles.createNodeWebDownAgilityBatch(jfcOpenFile.getSelectedFile().getPath());
            //CreateBatchFiles.createNodeDownAgilityBatch(jfcOpenFile.getSelectedFile().getPath());
            //
            CreateBatchFiles.writeOrganizations(jfcOpenFile.getSelectedFile().getPath());
            //
        }
        else {
            JOptionPane.showInternalMessageDialog(
                    this,
                    "No directory selected.",
                    "No directory selected.",
                    JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_jmiCreateAgilityBatchActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFMainWindow().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jbAddDir;
    private javax.swing.JButton jbAddFIle;
    private javax.swing.JButton jbGO;
    private javax.swing.JButton jbRemoveAll;
    private javax.swing.JButton jbRemoveFile;
    private javax.swing.JDialog jdWarnings;
    private javax.swing.JFileChooser jfcOpenFile;
    private javax.swing.JList jlLogList;
    private javax.swing.JMenu jmELICIT;
    private javax.swing.JMenu jmMiscTools;
    private javax.swing.JMenu jmTools;
    private javax.swing.JMenuItem jmiAgilityMaps;
    private javax.swing.JMenuItem jmiConversion;
    private javax.swing.JMenuItem jmiCreateAgentsBatch;
    private javax.swing.JMenuItem jmiCreateAgilityBatch;
    private javax.swing.JMenuItem jmiExit;
    private javax.swing.JMenuItem jmiOutputIdentifies;
    private javax.swing.JMenuItem jmiProcessDirectory;
    private javax.swing.JMenuItem jmiReclassify;
    // End of variables declaration//GEN-END:variables
    
}
