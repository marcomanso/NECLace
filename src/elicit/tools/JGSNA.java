/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JGSNA.java
 *
 * Created on 17/Out/2009, 0:05:39
 */

package elicit.tools;


import java.awt.*;
import java.awt.geom.*;
import java.io.File;
import java.io.FileWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;

import javax.swing.BorderFactory;
import javax.swing.JOptionPane;

import com.mxgraph.layout.*;
import com.mxgraph.swing.*;

import elicit.message.TrialData;
import elicit.message.OrganizationMessage;
import metrics.interaction.InteractionRates.ReciprocityRate;
import elicit.exportdata.ExportSocialNetworkToVNA;
//
import elicit.message.Message;
import org.jgrapht.*;
import org.jgrapht.generate.*;
import org.jgrapht.ext.*;
import org.jgrapht.io.*;
// resolve ambiguity
import org.jgrapht.graph.*;

/**
 *
 * @author mmanso
 */
public class JGSNA extends javax.swing.JFrame {

    //~ Static fields/initializers ---------------------------------------------
    private static final long serialVersionUID = 3256444702936019250L;
    private static final Color DEFAULT_BG_COLOR = Color.decode("#FAFBFF");
    private static final Dimension DEFAULT_SIZE_MAIN = new Dimension(800, 800);
    private static final Dimension DEFAULT_SIZE = new Dimension(500, 500);
    private static final double RADIUS = DEFAULT_SIZE.getHeight()/2.0;
    //~ Instance fields --------------------------------------------------------
    private boolean m_subjectsSNA = true;
    private static String SITE_SUFFIX = "_WEBSITE";
    //
    mxGraphComponent jgComponent;
    private JGraphXAdapter<String, DefaultWeightedEdge> jgxAdapter;
    //private JGraphXAdapter<String, DefaultEdge> jgxAdapter;
    
    //ListenableGraph<String, DefaultEdge> g;
    //SimpleDirectedWeightedGraph<String, DefaultWeightedEdge> g; 
    ListenableGraph<String, DefaultWeightedEdge> g;
    
    //private JGraphModelAdapter jgAdapter;
    //private JGraph jgraph;
    
	ComponentNameProvider<String> vertexIdProvider = new ComponentNameProvider<String>()
		{ public String getName(String s) {return s;} };
	ComponentNameProvider<String> vertexNameProvider = new ComponentNameProvider<String>()
		{ public String getName(String s) {return s;} };
	ComponentNameProvider<String> vertexAttrProvider = new ComponentNameProvider<String>()
		{ public String getName(String s) {return s;} };
	ComponentNameProvider<DefaultWeightedEdge> edgeIdProvider = new ComponentNameProvider<DefaultWeightedEdge>()
		{ public String getName(DefaultWeightedEdge e) {return e.toString();} };
	ComponentNameProvider<DefaultWeightedEdge> edgeNameProvider = new ComponentNameProvider<DefaultWeightedEdge>()
		{ public String getName(DefaultWeightedEdge e) {String w=Double.toString(g.getEdgeWeight(e)); return w;} };
    class SNAAttributeProvider implements ComponentAttributeProvider<DefaultWeightedEdge>{
		@Override
		public Map<String, Attribute> getComponentAttributes(DefaultWeightedEdge e) {
			Map<String, Attribute> m = new HashMap<String, Attribute> ();
			m.put("weight",new DefaultAttribute<Double>(g.getEdgeWeight(e), AttributeType.DOUBLE));
			return m;
		}
    };
	ComponentAttributeProvider<DefaultWeightedEdge> edgeAttrProvider = new SNAAttributeProvider();
    
    //
    private TrialData m_trialData;
    private ExportSocialNetworkToVNA m_exportToSNA;

        
    /** Creates new form JGSNA */
    public JGSNA(TrialData trialData) {
        m_trialData = trialData;
        m_exportToSNA = new ExportSocialNetworkToVNA(trialData);
        //
        initComponents();
        //
        init();
    }

    public JGSNA(TrialData trialData, boolean subjectsSNA) {
        m_subjectsSNA = subjectsSNA;
        m_trialData = trialData;
        m_exportToSNA = new ExportSocialNetworkToVNA(trialData);
        //
        initComponents();
        jbExport.setEnabled(false);
        //
        init();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpTime = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jsTime = new javax.swing.JSlider();
        jlTime = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jbExport = new javax.swing.JButton();
        jbExportGraphViz = new javax.swing.JButton();
        jbExportGraphML = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jcbWebsitesOn = new javax.swing.JCheckBox();
        jbRedraw = new javax.swing.JButton();

        setTitle("SNA");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Time: ");
        jpTime.add(jLabel1);

        jsTime.setValue(100);
        jsTime.setPreferredSize(new java.awt.Dimension(150, 24));
        jsTime.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jsTimeMouseReleased(evt);
            }
        });
        jsTime.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jsTimeStateChanged(evt);
            }
        });
        jpTime.add(jsTime);

        jlTime.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jlTime.setText("...");
        jlTime.setPreferredSize(new java.awt.Dimension(60, 14));
        jpTime.add(jlTime);

        jLabel2.setText("  (s)");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabel2.setPreferredSize(new java.awt.Dimension(40, 14));
        jpTime.add(jLabel2);

        jbExportGraphViz.setText("Export to GraphViz");
        jbExportGraphViz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExportGraphVizActionPerformed(evt);
            }
        });
        jpTime.add(jbExportGraphViz);

        jbExportGraphML.setText("Export to GraphML");
        jbExportGraphML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExportGraphMLActionPerformed(evt);
            }
        });
        jpTime.add(jbExportGraphML);

        jbExport.setText("Export to VNA (NetDraw)");
        jbExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExportActionPerformed(evt);
            }
        });
        jpTime.add(jbExport);
        
        getContentPane().add(jpTime, java.awt.BorderLayout.NORTH);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jcbWebsitesOn.setSelected(true);
        jcbWebsitesOn.setText("  Include Websites");
        jcbWebsitesOn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jcbWebsitesOn.setPreferredSize(new java.awt.Dimension(200, 23));
        jcbWebsitesOn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbWebsitesOnActionPerformed(evt);
            }
        });
        jPanel2.add(jcbWebsitesOn);

        jbRedraw.setLabel("REDRAW");
        jbRedraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRedrawActionPerformed(evt);
            }
        });
        jPanel2.add(jbRedraw);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);
        
        //getContentPane().setPreferredSize(DEFAULT_SIZE_MAIN);
        setPreferredSize(DEFAULT_SIZE_MAIN);

        pack();
        
    }// </editor-fold>//GEN-END:initComponents

    private void jsTimeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jsTimeMouseReleased
        buildSNAatTime(GetSelectedTime());
        //drawConnections(GetSelectedTime());
}//GEN-LAST:event_jsTimeMouseReleased

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        //buildSNAatTime(GetSelectedTime());
    }//GEN-LAST:event_formComponentResized

    private void jcbWebsitesOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbWebsitesOnActionPerformed
        //redraw
        buildSNAatTime(GetSelectedTime());
    }//GEN-LAST:event_jcbWebsitesOnActionPerformed

    private void jbRedrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRedrawActionPerformed
        //redraw
        buildSNAatTime(GetSelectedTime());
    }//GEN-LAST:event_jbRedrawActionPerformed

    private void jsTimeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jsTimeStateChanged
        jlTime.setText(Integer.toString(GetSelectedTime()));
}//GEN-LAST:event_jsTimeStateChanged

    private void jbExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExportActionPerformed
        java.io.File file = null;
        javax.swing.filechooser.FileNameExtensionFilter filter = new javax.swing.filechooser.FileNameExtensionFilter("VNA files", "txt", "vna");
        try {
            file = elicit.utils.dialogs.DialogFileChooser.SelectFile
            		(this, filter, new File(m_trialData.m_trialInformation.m_runname+".vna"), false);
            m_exportToSNA.writeVNAFile(file, GetSelectedTime(), jcbWebsitesOn.isSelected());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbExportActionPerformed

    private void jbExportGraphVizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExportActionPerformed
        File file = null;
        FileWriter writer = null;
        javax.swing.filechooser.FileNameExtensionFilter filter = new javax.swing.filechooser.FileNameExtensionFilter("GraphViz files", "txt", "dot");
        try {
            file = elicit.utils.dialogs.DialogFileChooser.SelectFile
            		(this, filter, new File(m_trialData.m_trialInformation.m_runname+".dot"), false);
            try {
                //GraphExporter<String, DefaultEdge> exporter = new DOTExporter<>(vertexIdProvider, vertexLabelProvider, null);                      
                //GraphExporter<String, DefaultEdge> exporter = new DOTExporter<>();                      
                GraphExporter<String, DefaultWeightedEdge> exporter = new DOTExporter<String, DefaultWeightedEdge>
                	(vertexIdProvider, vertexNameProvider, edgeNameProvider, null, edgeAttrProvider);                      
            	writer = new FileWriter(file);
                exporter.exportGraph(g, writer);
                
                System.out.println("RUN:  dot -Tpng "+file.getName()+" -o output.png");
                
            } catch (java.io.IOException ex) {
                ex.printStackTrace();
            } finally {
                if (writer != null) {
                    try {
                        writer.close();
                    } catch (java.io.IOException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }        
    
    private void jbExportGraphMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExportActionPerformed
        File file = null;
        FileWriter writer = null;
        javax.swing.filechooser.FileNameExtensionFilter filter = new javax.swing.filechooser.FileNameExtensionFilter("GraphViz files", "txt", "graphml");
        try {
            //file = elicit.utils.dialogs.DialogFileChooser.SelectFile(this, filter, false);
            file = elicit.utils.dialogs.DialogFileChooser.SelectFile
            		(this, filter, new File(m_trialData.m_trialInformation.m_runname+".graphml"), false);
            try {
                //GraphExporter<String, DefaultWeightedEdge> exporter = new GmlExporter<String, DefaultWeightedEdge>(
                //		vertexIdProvider, vertexNameProvider, edgeNameProvider, edgeIdProvider);
                GraphExporter<String, DefaultWeightedEdge> exporter = new GmlExporter<String, DefaultWeightedEdge>
                    	(vertexIdProvider, vertexNameProvider, edgeIdProvider, edgeNameProvider);                      
                //GraphExporter<String, DefaultWeightedEdge> exporter = new GraphMLExporter<String, DefaultWeightedEdge>
                //    	(vertexIdProvider, vertexNameProvider, null,
                //    	 edgeIdProvider, edgeNameProvider, edgeAttrProvider);                      
            	writer = new FileWriter(file);
                exporter.exportGraph(g, writer);
                                
            } catch 	(java.io.IOException ex) {
                ex.printStackTrace();
            } finally {
                if (writer != null) {
                    try {
                        writer.close();
                    } catch (java.io.IOException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                    ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }        
    
    public void init()
    {
        jlTime.setText(Integer.toString(GetSelectedTime()));

        //g = new DefaultListenableGraph<>(new DefaultDirectedGraph<>(DefaultEdge.class));       

        //g =   new SimpleDirectedWeightedGraph<String, DefaultWeightedEdge>(DefaultWeightedEdge.class);         
        g = new DefaultListenableGraph<String, DefaultWeightedEdge>(
        		new SimpleDirectedWeightedGraph<String, DefaultWeightedEdge>(DefaultWeightedEdge.class));
        
        //SimpleDirectedWeightedGraph<String, DefaultWeightedEdge>  graph = 
        //        new SimpleDirectedWeightedGraph<String, DefaultWeightedEdge>
        //        (DefaultWeightedEdge.class); 
        
        jgxAdapter = new JGraphXAdapter<String, DefaultWeightedEdge>(g);
        //jgxAdapter = new JGraphXAdapter<String, DefaultEdge>(g);
        jgComponent = new mxGraphComponent(jgxAdapter);
        
        jgComponent.setConnectable(false);
        //jgComponent.setCenterZoom(true);
        //jgComponent.setZoomFactor(0.5);
        //jgComponent.getGraph().setAllowDanglingEdges(false);
        getContentPane().add(jgComponent, BorderLayout.CENTER);
        
        //jgComponent.setBorder(BorderFactory.createEmptyBorder(100,100,100,100));
        
        //pack();

        // create a JGraphT graph
        buildSNAatTime(GetSelectedTime());

        //getContentPane().setPreferredSize(DEFAULT_SIZE);
        //setPreferredSize(DEFAULT_SIZE_MAIN);
                
        // ---> DO ALSO TEAM INTERACTIONS
    }

    private void buildSNAatTime(double time) {

    	//hack:  simplified... do not assume structure
    	//TODO:  button to change structure
    	
        buildEdgeSNAatTime(time);

        /*
    	//determine organization structure: teams, team leaders and CTC - or - edge
        if (OrganizationMessage.isEdge(m_trialData.m_organizationInformation.m_organizationName))
            buildEdgeSNAatTime(time);
        else //if (m_subjectsSNA)
            buildStructuredOrganizationSNAatTime(time);
        //else
        //    buildTeamStructuredOrganizationSNAatTime(time);
         * 
         */
    }

    /*
    private double getCenterX () {
        //return jgraph.getWidth()/2.0;
        //return 200;
        return jgComponent.getWidth()/2.0;
    }

    private double getCenterY () {
        //return jgraph.getHeight()/2.0;
        //return 200;
        return jgComponent.getHeight()/2.0;
    }

    private double getInnerRadius () {
    	
        if (jgComponent.getWidth() < jgComponent.getHeight())
            return jgComponent.getWidth()*1.2/6.0;
        else
            return jgComponent.getHeight()*1.2/6.0;
        
    }

    private double getOuterRadius () {
        if (jgComponent.getWidth() < jgComponent.getHeight())
            return jgComponent.getWidth()*2.1/6.0;
        else
            return jgComponent.getHeight()*2.1/6.0;
    }

    private double getSitesOuterRadius () {

        if (jgComponent.getWidth() < jgComponent.getHeight())
            return jgComponent.getWidth()*0.9/2.0;
        else
            return jgComponent.getHeight()*0.9/2.0;
    }
    */

    private void addVertex(String name) {
        if (!g.containsVertex(name))
            g.addVertex(name);
    }

    private void removeVertex(String name) {
        if (g.containsVertex(name))
            g.removeVertex(name);
    }

    private void addEdge(String n1, String n2) {
       	g.addEdge(n1, n2);
    	/*
        if (!g.containsEdge(n1, n2)
                //following conditions added: user may deselect presentation 
                //of websites - hence, some vertexes may not exist
             && g.containsVertex(n1) && g.containsVertex(n2)) 
        {
            g.addEdge(n1, n2);        	
        }
        */
    }
    
    private void addEdge(String n1, String n2, double weight) {
    	DefaultWeightedEdge e = g.addEdge(n1, n2);
        g.setEdgeWeight(e, weight);    		
    }

    private void removeEdge(String n1, String n2) {
        if (g.containsEdge(n1, n2))
            g.removeEdge(n1, n2);
    }

    private void buildEdgeSNAatTime (double time) {

        //add vertexes
        //draw individuals
        for (TrialData.Subject s : m_trialData.m_organizationInformation.m_memberList) {
            addVertex(s.m_personName);
        }
        //draw teams websites?
        for (String team : Message.m_webSitesList) {
            if (jcbWebsitesOn.isSelected()) {
                addVertex(team);
            }
            else {
                removeVertex(team);
            }
        }
        
        drawConnections(time);

        //jgComponent.setSize(DEFAULT_SIZE);
        //pack();
        

    	// CIRCLE
        mxCircleLayout layout = new mxCircleLayout(jgxAdapter);
        layout.execute(jgxAdapter.getDefaultParent());
        
        //jgComponent.setSize(DEFAULT_SIZE);
        //pack();
        
        /*
        
        mxEdgeLabelLayout layout = new mxEdgeLabelLayout(jgxAdapter);
        layout.execute(jgxAdapter.getDefaultParent());
        
        mxPartitionLayout layout = new mxPartitionLayout(jgxAdapter, true, 10);
        layout.execute(jgxAdapter.getDefaultParent());

        mxCompactTreeLayout layout = new mxCompactTreeLayout(jgxAdapter);
        layout.execute(jgxAdapter.getDefaultParent());
        
        mxStackLayout layout = new mxStackLayout(jgxAdapter);
        layout.execute(jgxAdapter.getDefaultParent());
*/

    	
        
    	/*
        //add vertexes
        double incrementAngle = 2.0 * Math.PI / (double)m_trialData.m_organizationInformation.m_memberList.size() ;
        double center_x = getCenterX();
        double center_y = getCenterY();
        double currentAngle = 0.0;
        for (TrialData.Subject s : m_trialData.m_organizationInformation.m_memberList) {
            addVertex(s.m_personName);
            int x = (int)(getOuterRadius()*Math.cos(currentAngle) + center_x);
            int y = (int)(getOuterRadius()*Math.sin(currentAngle) + center_y);
            positionVertexAt(s.m_personName, x, y);
            currentAngle+=incrementAngle;
        }

        //draw teams websites?
        //incrementAngle = 2.0 * Math.PI / (double)m_trialData.m_organizationInformation.m_teamList.size() ;
        incrementAngle = 2.0 * Math.PI / (double)Message.m_webSitesList.length;
        currentAngle = Math.PI / 4.0 ;
        //for (String team : m_trialData.m_organizationInformation.m_teamList) {
        for (String team : Message.m_webSitesList) {
            if (jcbWebsitesOn.isSelected()) {
                addVertex(team);
                int x = (int)(getInnerRadius()*Math.cos(currentAngle) + center_x);
                int y = (int)(getInnerRadius()*Math.sin(currentAngle) + center_y);
                positionVertexAt(team, x, y);
                currentAngle+=incrementAngle;
            }
            else {
                removeVertex(team);
            }
        }
        drawConnections(time);
        */
    }

    /*
    private void buildStructuredOrganizationSNAatTime (double time) {
        //assume:
        // -ctc role
        // -tl role
        // -tm role
        double center_x = getCenterX();
        double center_y = getCenterY();
        //process CTC
        for (TrialData.Subject s : m_trialData.m_organizationInformation.m_memberList) {
            if (s.m_isOverallCoordinator) {
                addVertex(s.m_personName);
                positionVertexAt(s.m_personName, (int)center_x, (int)center_y);
            }
        }
        //process TLs and TMs
        double incrementAngle = 2.0 * Math.PI / (double)m_trialData.getNbrTeamLeaders();
        double currentAngle = Math.PI / 4.0; 
        //
        double const_angleOffsetStartTM = - Math.PI / 6.0;
        double incrementAngleTM = 0.0;
        double currentAngleTM = 0.0;
        for (TrialData.Subject s : m_trialData.m_organizationInformation.m_memberList) {
            //find leader
            if (s.m_isTeamLeader) {
                int x = (int)(getInnerRadius()*Math.cos(currentAngle) + center_x);
                int y = (int)(getInnerRadius()*Math.sin(currentAngle) + center_y);
                addVertex(s.m_personName);
                positionVertexAt(s.m_personName, x, y);
                //now handle members
                int nbrMembers = m_trialData.getNbrTeamMembers(s.m_teamName);
                if (nbrMembers > 2) {
                    incrementAngleTM = const_angleOffsetStartTM * 2.0 / (double)(nbrMembers-2);
                    currentAngleTM = currentAngle + const_angleOffsetStartTM;
                }
                else {
                    incrementAngleTM = 0.0;
                    currentAngleTM = currentAngle;
                }
                //second loop to get team members
                for (TrialData.Subject member : m_trialData.m_organizationInformation.m_memberList) {
                    if (member.m_teamName.equalsIgnoreCase(s.m_teamName) && !member.m_isTeamLeader) {
                        int member_x = (int)(getOuterRadius()*Math.cos(currentAngleTM) + center_x);
                        int member_y = (int)(getOuterRadius()*Math.sin(currentAngleTM) + center_y);
                        addVertex(member.m_personName);
                        positionVertexAt(member.m_personName, member_x, member_y);
                        currentAngleTM -= incrementAngleTM;
                    }
                }
                //set currentAngleOffsetTM
                //move to next TL angle
                currentAngle+=incrementAngle;
            }
        }
        //draw teams websites?
        //process Sites / Teams
        //incrementAngle = 2.0 * Math.PI / (double)m_trialData.m_organizationInformation.m_teamList.size() ;
        incrementAngle = 2.0 * Math.PI / (double)Message.m_webSitesList.length;
        currentAngle = Math.PI / (4.0-1.0) ; //put some tilt so that CTC and TL lines do not overlap
        //for (String team : m_trialData.m_organizationInformation.m_teamList) {
        for (String team : Message.m_webSitesList) {
            if (jcbWebsitesOn.isSelected()) {
                addVertex(team);
                int x = (int)(getSitesOuterRadius()*Math.cos(currentAngle) + center_x);
                int y = (int)(getSitesOuterRadius()*Math.sin(currentAngle) + center_y);
                positionVertexAt(team, x, y);
                currentAngle+=incrementAngle;
            }
            else {
                removeVertex(team);
            }
        }
        drawConnections(time);
    }

    private void buildTeamStructuredOrganizationSNAatTime (double time) {
        //assume:
        // -ctc role
        // -tl role
        // -tm role
        double center_x = getCenterX();
        double center_y = getCenterY();
        //process CTC
        String CTCTeam = "";
        for (TrialData.Subject s : m_trialData.m_organizationInformation.m_memberList) {
            if (s.m_isOverallCoordinator) {
                CTCTeam = s.m_teamName;
                addVertex(s.m_teamName);
                positionVertexAt(s.m_teamName, (int)center_x, (int)center_y);
            }
        }
        //process TLs and TMs
        double incrementAngle = 2.0 * Math.PI / (double)(m_trialData.m_organizationInformation.m_teamList.size()-1);
        double currentAngle = Math.PI / 4.0;
        //
        for (String team : m_trialData.m_organizationInformation.m_teamList)
            if (!team.equals(CTCTeam)) {
                int x = (int)(getInnerRadius()*Math.cos(currentAngle) + center_x);
                int y = (int)(getInnerRadius()*Math.sin(currentAngle) + center_y);
                addVertex(team);
                positionVertexAt(team, x, y);
                //
                currentAngle+=incrementAngle;
            }
        //draw teams websites?
        //process Sites / Teams
        incrementAngle = 2 * Math.PI / (double)m_trialData.m_organizationInformation.m_teamList.size() ;
        currentAngle = Math.PI / 2.0 ;
        for (String team : m_trialData.m_organizationInformation.m_teamList) {
            if (jcbWebsitesOn.isSelected()) {
                addVertex(team+SITE_SUFFIX);
                int x = (int)(getSitesOuterRadius()*Math.cos(currentAngle) + center_x);
                int y = (int)(getSitesOuterRadius()*Math.sin(currentAngle) + center_y);
                positionVertexAt(team+SITE_SUFFIX, x, y);
                currentAngle+=incrementAngle;
            }
            else {
                removeVertex(team+SITE_SUFFIX);
            }
        }
        drawTeamConnections(time);
    }
     */

    private void drawConnections (double time) {
        //erase all connections
        for (TrialData.Subject s1 : m_trialData.m_organizationInformation.m_memberList) {
            for (TrialData.Subject s2 : m_trialData.m_organizationInformation.m_memberList)
                if ( !s1.m_personName.equals(s2.m_personName) )
                    removeEdge(s1.m_personName, s2.m_personName);
            for (String team : m_trialData.m_organizationInformation.m_teamList) {
                removeEdge(s1.m_personName, team);
                removeEdge(team, s1.m_personName);
            }
        }
        //draw
        for ( String srcName : m_trialData.m_interactions.m_socialInterations.keySet() )
            for ( String dstName : m_trialData.m_interactions.m_socialInterations.get(srcName).keySet() ) {
            	ReciprocityRate rr = m_trialData.m_interactions.m_socialInterations.getReciprocityAtTime(srcName, dstName, time);

            	if (rr!=null && rr.totalInteractions!=0) {
                	//need to check if no websites
                    if (jcbWebsitesOn.isSelected()) {
                        addEdge(srcName, dstName, rr.totalSent);
                    } else {
                    	if ( m_trialData.getOrganizationSubject(srcName)!=null
                    			&& m_trialData.getOrganizationSubject(dstName)!=null ) {
                            addEdge(srcName, dstName, rr.totalSent);
                    	}
                    }            		
            	}
            	//System.out.println(srcName+"-"+dstName+":"
            	//		+rr.totalInteractions
            	//		+"("+rr.totalSent+"|"+rr.totalRcv+")");
            }
        
    }

    /*
    private void drawTeamConnections (double time) {
        //erase all connections
        for (String team : m_trialData.m_organizationInformation.m_teamList)
            for (String team2 : m_trialData.m_organizationInformation.m_teamList)
                if ( !team.equals(team2) ) {
                    removeEdge(team, team2);
                    removeEdge(team, team+SITE_SUFFIX);
                }

        //draw
        for (TrialData.Subject s1 : m_trialData.m_organizationInformation.m_memberList)
            for (TrialData.Subject s2 : m_trialData.m_organizationInformation.m_memberList)
                if (!s1.m_teamName.equals(s2.m_teamName)) {
                    ReciprocityRate rr = m_trialData.m_interactions.m_socialInterations.getReciprocityAtTime(s1.m_personName, s2.m_personName, time);
                    if (rr!=null)
                        addEdge(s1.m_teamName, s2.m_teamName);
                }
        for (TrialData.Subject s1 : m_trialData.m_organizationInformation.m_memberList)
            for (String team : m_trialData.m_organizationInformation.m_teamList) {
                ReciprocityRate rr = m_trialData.m_interactions.m_socialInterations.getReciprocityAtTime(s1.m_personName, team, time);
                if (rr != null)
                    addEdge(s1.m_personName, team+SITE_SUFFIX);
            }
    } //end drawTeamConnections
*/

    /*
    private void adjustDisplaySettings(JGraphXAdapter jg)
    {
        jg.setPreferredSize(DEFAULT_SIZE);
        jg.setMinimumSize(DEFAULT_SIZE);
        jg.setBackground(DEFAULT_BG_COLOR);
    }
    */

    @SuppressWarnings("unchecked") // FIXME hb 28-nov-05: See FIXME below
    private void positionVertexAt(Object vertex, int x, int y)
    {
    	/*
        DefaultGraphCell cell = jgAdapter.getVertexCell(vertex);
        AttributeMap attr = cell.getAttributes();
        Rectangle2D newBounds = new Rectangle2D.Double(x,y,60,30);
        GraphConstants.setBounds(attr, newBounds);

        // TODO: Clean up generics once JGraph goes generic
        AttributeMap cellAttr = new AttributeMap();
        cellAttr.put(cell, attr);
        jgAdapter.edit(cellAttr, null, null, null);
        */
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * a listenable directed multigraph that allows loops and parallel edges.
     */
    
    /*
    private static class ListenableDirectedMultigraph<V, E>
        extends DefaultListenableGraph<V, E>
        implements DirectedGraph<V, E>
    {
        private static final long serialVersionUID = 1L;

        ListenableDirectedMultigraph(Class<E> edgeClass)
        {
            super(new DirectedMultigraph<V, E>(edgeClass));
        }
    }
    */

    public int GetSelectedTime () {
        return (int) ( jsTime.getValue() * m_trialData.m_trialInformation.m_durationSec / 100.0);
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jbExport;
    private javax.swing.JButton jbExportGraphViz;
    private javax.swing.JButton jbExportGraphML;
    private javax.swing.JButton jbRedraw;
    private javax.swing.JCheckBox jcbWebsitesOn;
    private javax.swing.JLabel jlTime;
    private javax.swing.JPanel jpTime;
    private javax.swing.JSlider jsTime;
    // End of variables declaration//GEN-END:variables

}
